# 给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
#
# 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。
#
#  
#
# 示例 1:
#
# 给定数组 nums = [1,1,2],
#
# 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。
#
# 你不需要考虑数组中超出新长度后面的元素。
# 示例 2:
#
# 给定 nums = [0,0,1,1,1,2,2,3,3,4],
#
# 函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。
#
# 你不需要考虑数组中超出新长度后面的元素。
#
# 来源：力扣（LeetCode）
# 链接：https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array
# 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        '''题目要求两件事：
统计数组中不同数字数量 kk ；
修改数组前 k 个元素为这些不同数字。
算法流程：
第一个指针 i ： 由于数组已经完成排序，因此遍历数组，
每遇到 nums[i] != nums[i - 1] 就说明遇到了新的不同数字，记录之；
第二个指针 k ： 每遇到新的不同数字时，执行 k += 1 ，
k 指针有两个作用：记录数组中不同数字的数量；
作为修改数组元素的索引index。
最终，返回 k 即可。
'''
        if not len(nums):
            return 0
        k = 1
        for i in range(1,len(nums)):
            if nums[i] != nums[i - 1]:
                nums[k] = nums[i]
                k += 1
        return k

